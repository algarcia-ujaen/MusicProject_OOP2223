@startuml
'https://plantuml.com/class-diagram

'forces to apply the UML style strictly
skinparam style strictuml
'changes the symbols leading the attributes and methods
skinparam ClassAttributeIconSize 0

class Song{
   - length: int = 0
   - genre: string = ""
   - artist: string = ""
   - title: string = ""
   - comments: *string = null
   - nComments: int = 0
   + Song ( l: float = 1, t: string = "" )
   + Song ( length: float, genre: string
          , artist: string, title: string )
   + Song ( orig: Song )
   + ~Song ()
   + getLength (): float
   + setLength ( length: float )
   + getGenre (): string
   + setGenre ( genre: string )
   + getArtist (): string
   + setArtist ( artist: string )
   + getTitle (): string
   + setTitle ( title: string )
   + getNComments (): int
   + addComment ( comment: string )
   + operator= ( other: Song ): Song
   + operator> ( other: Song ): bool
   + operator+ ( other: Song ): Song
}

class Artist{
   - name: string = ""
   - id: int = 0
   + Artist ()
   + ~Artist ()
   + getName (): string
   + setName ( nN: string )
   + getId (): int
   + setId ( id: int )
   + toCSV (): string
   {abstract}+ playMusic ()
}

class PlayList{
   - name: string = ""
   + getLength (): int
   + PlayList ( name: string )
   + ~PlayList ()
   + getLength (): int
   + addSong ( s: Song )
   + getSong ( whichOne: int ): Song
   + deleteSong ( whichOne: int )
   + getNumberOfSongs (): int
}

class MusicException{
   - errorMsg: string = ""
   - className: string = ""
   - methodName: string = ""
   + MusicException ( cN: string, mN: string
                    , eM: string )
   + ~MusicException ()
   + getErrorMsg (): string
   + setErrorMsg ( eM: string )
   + getClassName (): string
   + setClassName ( cN: string )
   + getMethodName (): string
   + setMethodName ( mN: string )
   + getFullMessage (): string
}

class Melody {
   - score: string = ""
   + getScore (): string
   + setScore ( s: string )
}

class Lyrics {
   - contents: string
   + getContent (): string
   + setContent ( c: string )
}

class Singer extends Artist {
   - voiceType: string
   + Singer ( vType: string )
   + Singer ( i: int, n: string, vT: string )
   + Singer ( orig: Singer )
   + getVoiceType (): string
   + setVoiceType ( vType: string )
   + toCSV (): string
   + playMusic ()
}

class Musician extends Artist {
   - instrument: string
   + Musician ( i: int, n: string, ins: string )
   + Musician ( instrument: string )
   + Musician ( orig: Musician )
   + getInstrument (): string
   + setInstrument ( instrument: string )
   + toCSV (): string
   + playMusic ()
}

interface CanBeSaved <<Interface>> {
   {abstract} + toCSV (): string
}

PlayList o-- "songs\n1..100" Song
Song "*" -right-> "author\n1" Artist: created by
Song ..> MusicException
PlayList ..> MusicException
Song *-- "music" Melody
Song *-- "songLyrics" Lyrics
CanBeSaved <|.. Artist

@enduml